// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freeList = 2048;
        let freeList[0] = 14335;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;

        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int fit, base;

        let fit = freeList;

        while (~base) {
            if (fit = 0) {
                do Sys.halt();
                return 0;
            }

            if (fit[0] > (size + 2)) {
                let base = fit + fit[0] - (size + 1);
                let ram[base - 1] = size + 1;
                let fit[0] = fit[0] - (size + 1);
            } else {
                let fit = fit[1];
            }
        }

        return base;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int nextFreeList;

        // if object size is not enough for being a free list
        if (o[-1] < 3) {
            return;
        }

        let nextFreeList = freeList;
        let freeList = o - 1;
        let freeList[1] = nextFreeList;

        return;
    }
}
