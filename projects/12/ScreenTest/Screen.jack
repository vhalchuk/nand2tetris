// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static int SCREEN_BASE_ADDRESS;
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i;

        let SCREEN_BASE_ADDRESS = 16384;

        let color = true;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;

        while (i < 16) {
            let twoToThe[i] = twoToThe[i - 1] + twoToThe[i - 1];
            let i = i + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var bool savedColor;
        let savedColor = savedColor;
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 255);
        do Screen.setColor(savedColor);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, modulo, pixelMask, withPixel;

        let modulo = x & 15;
        let address = SCREEN_BASE_ADDRESS + ((x - modulo) / 16) + (y * 32);
        let pixelMask = twoToThe[modulo];

        if (color) {
           let withPixel = Memory.peek(address) | pixelMask;
        } else {
            let withPixel = Memory.peek(address) & ~pixelMask;
        }

        do Memory.poke(address, withPixel);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if (x1 = x2) {
            while (~(y1 = y2)) {
                do Screen.drawPixel(x1, y1);
                if (y1 > y2) {
                    let y1 = y1 - 1;
                } else {
                    let y1 = y1 + 1;
                }
            }
            return;
        }

        if (y1 = y2) {
            while (~(x1 = x2)) {
                do Screen.drawPixel(x1, y1);
                if (x1 > x2) {
                    let x1 = x1 - 1;
                } else {
                    let x1 = x1 + 1;
                }
            }
            return;
        }

        do Screen._drawSlopedLine(x1, y1, x2, y2);

        return;
    }

    function void _drawSlopedLine(int x1, int y1, int x2, int y2) {
        var int deltaX, deltaY, moveX, moveY, xDirection, yDirection, nextX, nextY, diff;

        let deltaX = Math.abs(x2 - x1);
        let deltaY = Math.abs(y2 - y1);
        let xDirection = (x2 - x1) > 0;
        let yDirection = (y2 - y1) > 0;

        while (~(moveX > deltaX) & ~(moveY > deltaY)) {
            if (xDirection) {
                let nextX = x1 + moveX;
            } else {
                let nextX = x1 - moveX;
            }

            if (yDirection) {
                let nextY = y1 + moveY;
            } else {
                let nextY = y1 - moveY;
            }

            do Screen.drawPixel(nextX, nextY);

            let diff = (moveX * deltaY) - (moveY * deltaX);
            if (diff < 0) {
                let moveX = moveX + 1;
                let diff = diff + deltaY;
            } else {
                let moveY = moveY + 1;
                let diff = diff + deltaX;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy, i;

        let dy = y2 - y1;

        while (i < dy) {
            do Screen.drawLine(x1, y1 + i, x2, y1 + i);
            let i = i + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i, startY, endY, offset;

        let startY = y - r;
        let endY = 2 * r + 1;

        while (i < endY) {
            let offset = Math.sqrt(Math.abs((i * i) - (2 * i * r)));
            do Screen.drawLine(x - offset, startY + i, x + offset, startY + i);
            let i = i + 1;
        }

        return;
    }
}
